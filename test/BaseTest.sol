
// SPDX-License-Identifier: Apache 2
pragma solidity 0.8.30;

import {Test, console2} from "forge-std/Test.sol";
import {AaveStrategy} from "src/strategies/aave/AaveStrategy.sol"; 
import {FeeReceiver} from "src/FeeReceiver.sol"; 
import {GovToken} from "src/governance/GovToken.sol"; 
import {MultiChainVault} from "src/MultiChainVault.sol"; 
import {MultiChainVaultFactory} from "src/MultiChainVaultFactory.sol"; 
import {ProtocolGovernor} from "src/governance/ProtocolGovernor.sol"; 
import {ShareStaker} from "src/staker/ShareStaker.sol"; 
import {VaultDepositor} from "src/VaultDepositor.sol"; 
import {WormholeMessageSender} from "src/cross-chain/wormhole/WormholeMessageSender.sol"; 
import {MockERC20} from "./mocks/MockERC20.sol";
import {IERC20} from "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";

contract AutoGeneratedTest is Test {
    // AaveStrategy aavestrategy;
    FeeReceiver feereceiver;
    GovToken govtoken;
    MultiChainVault multichainvault;
    MultiChainVaultFactory multichainvaultfactory;
    ProtocolGovernor protocolgovernor;
    ShareStaker sharestaker;


    VaultDepositor vaultdepositor;
    WormholeMessageSender wormholeSender;
    MockERC20 usdc;
    // MockVault mockVault;

    uint16 public constant WORMHOLE_ETHEREUM_CHAIN_ID = 2;
    address public constant WORMHOLE_STANDARD_ETHEREUM_RELAYER = 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    address public constant WORMHOLE_ETHEREUM_TOKEN_BRIDGE     = 0x3ee18B2214AFF97000D974cf647E7C347E8fa585;
    address public constant UNISWAP_ETHEREUM_V2_ROUTER         = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;




    uint256 public constant INITIAL_USDC_BALANCE = 1000e18;



    address juan = makeAddr("juan");
    address sid = makeAddr("sid");


    address user = makeAddr("user");
    function setup() external {
        address[] memory owners = new address[](2);
        usdc = new MockERC20();
        owners[0] = juan;
        owners[1] = sid;

        multichainvaultfactory = new MultiChainVaultFactory(owners);
        wormholeSender = new WormholeMessageSender(WORMHOLE_STANDARD_ETHEREUM_RELAYER, address(multichainvaultfactory));
        feereceiver = new FeeReceiver(owners);
        govtoken = new GovToken();
        sharestaker = new ShareStaker(address(govtoken));
        protocolgovernor = new ProtocolGovernor(address(govtoken), 1, 100, 0, 0);
        vaultdepositor = new VaultDepositor(owners, WORMHOLE_ETHEREUM_CHAIN_ID, address(multichainvaultfactory),address(wormholeSender),WORMHOLE_STANDARD_ETHEREUM_RELAYER, WORMHOLE_ETHEREUM_TOKEN_BRIDGE, address(usdc), UNISWAP_ETHEREUM_V2_ROUTER, address(protocolgovernor));
        govtoken.setShareStaker(address(sharestaker)); 
        sharestaker.setShares(address(vaultdepositor));

        

        deal(address(usdc), user, INITIAL_USDC_BALANCE);
    }

    function test_autoGenerated() external {
        console2.log("Auto generated test !!");
    }

    function test_crossChainDeposit() external {

    }
}

